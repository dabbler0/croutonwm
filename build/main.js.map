{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/main.coffee"],"names":[],"mappingsfile":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var LAYOUTS, MonocleLayout, RightStackLayout, currentDesktop, validateList;\n\nchrome.management.getAll(function(apps) {\n  var app, j, len, terminalId, terminalURL;\n  terminalId = null;\n  for (j = 0, len = apps.length; j < len; j++) {\n    app = apps[j];\n    if (app.name === 'Secure Shell') {\n      terminalId = app.id;\n    }\n  }\n  terminalURL = 'chrome-extension://' + terminalId + '/html/crosh.html';\n  return chrome.commands.onCommand.addListener(function(command) {\n    var childWindow;\n    if (command === 'open-terminal') {\n      childWindow = window.open(terminalURL, '_blank', 'titlebar=no,toolbar=no');\n      return childWindow.document.getElementById('terminal').focus();\n\n      /*\n      chrome.windows.create {\n        url: 'chrome-extension://' + terminalId + '/html/crosh.html'\n        type: 'popup'\n        focused: true\n      }, ->\n         * Allow the user to type immediately\n        chrome.tabs.executeScript\n          code: 'document.getElementById(\"terminal\").focus();'\n       */\n    }\n  });\n});\n\nMonocleLayout = (function() {\n  function MonocleLayout(master1, stacked1) {\n    this.master = master1;\n    this.stacked = stacked1;\n  }\n\n  MonocleLayout.prototype.hide = function() {\n    var j, len, ref, results, stacked;\n    if (this.master != null) {\n      chrome.windows.update(this.master, {\n        state: 'minimized'\n      });\n    }\n    ref = this.stacked;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n      stacked = ref[j];\n      results.push(chrome.windows.update(stacked, {\n        state: 'minimized'\n      }));\n    }\n    return results;\n  };\n\n  MonocleLayout.prototype.validate = function(cb) {\n    return validateList(this.stacked, (function(_this) {\n      return function(stacked, changed) {\n        _this.stacked = stacked;\n        return cb(changed);\n      };\n    })(this));\n  };\n\n  MonocleLayout.prototype.update = function() {\n    var j, len, ref, stacked;\n    console.log('updating monocle layout');\n    if (this.master != null) {\n      chrome.windows.update(this.master, {\n        left: 0,\n        top: 0,\n        width: screen.width,\n        height: screen.height,\n        state: 'normal'\n      });\n    }\n    ref = this.stacked;\n    for (j = 0, len = ref.length; j < len; j++) {\n      stacked = ref[j];\n      chrome.windows.update(stacked, {\n        left: 0,\n        top: 0,\n        width: screen.width,\n        height: screen.height,\n        state: 'normal'\n      });\n    }\n    return this.validate(function(changed) {\n      if (changed) {\n        return this.update();\n      }\n    });\n  };\n\n  return MonocleLayout;\n\n})();\n\nvalidateList = function(list, cb, i, filtered, changed) {\n  if (i == null) {\n    i = 0;\n  }\n  if (filtered == null) {\n    filtered = [];\n  }\n  if (changed == null) {\n    changed = false;\n  }\n  if (i === list.length) {\n    return cb(filtered, changed);\n  } else {\n    return chrome.windows.get(list[i], {\n      populate: false\n    }, function(window) {\n      if (window != null) {\n        filtered.push(list[i]);\n      } else {\n        changed = true;\n      }\n      return validateList(list, cb, i + 1, filtered, changed);\n    });\n  }\n};\n\nRightStackLayout = (function() {\n  function RightStackLayout(master1, stacked1) {\n    this.master = master1;\n    this.stacked = stacked1;\n  }\n\n  RightStackLayout.prototype.hide = function() {\n    var j, len, ref, results, stacked;\n    if (this.master != null) {\n      chrome.windows.update(this.master, {\n        state: 'minimized'\n      });\n    }\n    ref = this.stacked;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n      stacked = ref[j];\n      results.push(chrome.windows.update(stacked, {\n        state: 'minimized'\n      }));\n    }\n    return results;\n  };\n\n  RightStackLayout.prototype.validate = function(cb) {\n    return validateList(this.stacked, (function(_this) {\n      return function(stacked, changed) {\n        _this.stacked = stacked;\n        return cb(changed);\n      };\n    })(this));\n  };\n\n  RightStackLayout.prototype.update = function() {\n    var i, j, len, ref, stacked;\n    if (this.stacked.length > 0) {\n      chrome.windows.update(this.master, {\n        left: 0,\n        top: 0,\n        width: Math.round(screen.width / 2),\n        height: screen.height,\n        state: 'normal'\n      });\n      ref = this.stacked;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        stacked = ref[i];\n        chrome.windows.update(stacked, {\n          left: Math.round(screen.width / 2),\n          top: Math.round((i / this.stacked.length) * screen.height),\n          width: Math.round(screen.width / 2),\n          height: Math.round(screen.height / this.stacked.length),\n          state: 'normal'\n        });\n      }\n    } else if (this.master != null) {\n      chrome.windows.update(this.master, {\n        left: 0,\n        top: 0,\n        width: screen.width,\n        height: screen.height\n      });\n    }\n    return this.validate(function(changed) {\n      if (changed) {\n        return this.update();\n      }\n    });\n  };\n\n  return RightStackLayout;\n\n})();\n\nLAYOUTS = (function() {\n  var j, results;\n  results = [];\n  for (j = 0; j <= 9; j++) {\n    results.push(new RightStackLayout(null, []));\n  }\n  return results;\n})();\n\ncurrentDesktop = 1;\n\nchrome.windows.getAll({\n  populate: false\n}, function(windows) {\n  var j, len, master, stacked, window;\n  master = null;\n  stacked = [];\n  for (j = 0, len = windows.length; j < len; j++) {\n    window = windows[j];\n    if (window.focused) {\n      master = window.id;\n    } else {\n      stacked.push(window.id);\n    }\n  }\n  LAYOUTS[currentDesktop].master = master;\n  LAYOUTS[currentDesktop].stacked = stacked;\n  chrome.windows.onCreated.addListener(function(window) {\n    if (LAYOUTS[currentDesktop].master != null) {\n      LAYOUTS[currentDesktop].stacked.unshift(LAYOUTS[currentDesktop].master);\n    }\n    LAYOUTS[currentDesktop].master = window.id;\n    return LAYOUTS[currentDesktop].update();\n  });\n  return chrome.windows.onRemoved.addListener(function(id) {\n    if (id === LAYOUTS[currentDesktop].master) {\n      LAYOUTS[currentDesktop].master = LAYOUTS[currentDesktop].stacked.shift();\n    } else {\n      LAYOUTS[currentDesktop].stacked = LAYOUTS[currentDesktop].stacked.filter(function(x) {\n        return x !== id;\n      });\n    }\n    chrome.windows.update(LAYOUTS[currentDesktop].master, {\n      focused: true\n    });\n    return LAYOUTS[currentDesktop].update();\n  });\n});\n\nchrome.commands.onCommand.addListener(function(command) {\n  console.log('got', command);\n  if (command === 'make-master') {\n    return chrome.windows.getLastFocused({\n      populate: false\n    }, function(window) {\n      if (window.id !== LAYOUTS[currentDesktop].master) {\n        LAYOUTS[currentDesktop].stacked = LAYOUTS[currentDesktop].stacked.filter(function(x) {\n          return x !== window.id;\n        });\n        LAYOUTS[currentDesktop].stacked.unshift(LAYOUTS[currentDesktop].master);\n        LAYOUTS[currentDesktop].master = window.id;\n        return LAYOUTS[currentDesktop].update();\n      }\n    });\n  } else if (command === 'rotate-window') {\n    return chrome.windows.getLastFocused({\n      populate: false\n    }, function(window) {\n      var index;\n      if ((window != null) && (LAYOUTS[currentDesktop].master != null)) {\n        if (window.id === LAYOUTS[currentDesktop].master && LAYOUTS[currentDesktop].stacked.length > 0) {\n          return chrome.windows.update(LAYOUTS[currentDesktop].stacked[0], {\n            focused: true\n          });\n        } else {\n          index = LAYOUTS[currentDesktop].stacked.indexOf(window.id);\n          if (index === LAYOUTS[currentDesktop].stacked.length - 1) {\n            return chrome.windows.update(LAYOUTS[currentDesktop].master, {\n              focused: true\n            });\n          } else {\n            return chrome.windows.update(LAYOUTS[currentDesktop].stacked[index + 1], {\n              focused: true\n            });\n          }\n        }\n      }\n    });\n  } else if (command === 'close-window') {\n    return chrome.windows.getLastFocused({\n      populate: false\n    }, function(window) {\n      return chrome.windows.remove(window.id);\n    });\n  } else if (command === 'switch-layout') {\n    if (LAYOUTS[currentDesktop] instanceof RightStackLayout) {\n      console.log('switching to monocle');\n      LAYOUTS[currentDesktop] = new MonocleLayout(LAYOUTS[currentDesktop].master, LAYOUTS[currentDesktop].stacked);\n      return LAYOUTS[currentDesktop].update();\n    } else if (LAYOUTS[currentDesktop] instanceof MonocleLayout) {\n      console.log('switching to right-stack');\n      LAYOUTS[currentDesktop] = new RightStackLayout(LAYOUTS[currentDesktop].master, LAYOUTS[currentDesktop].stacked);\n      return LAYOUTS[currentDesktop].update();\n    }\n  } else if (command === 'open-chrome') {\n    return chrome.windows.create();\n  } else if (command.match(/desktop-\\d/) != null) {\n    LAYOUTS[currentDesktop].hide();\n    currentDesktop = Number(command[8]);\n    console.log('on desktop', currentDesktop);\n    return LAYOUTS[currentDesktop].validate(function() {\n      LAYOUTS[currentDesktop].update();\n      return chrome.windows.update(LAYOUTS[currentDesktop].master, {\n        focused: true\n      });\n    });\n  } else if (command.match(/send-\\d/) != null) {\n    console.log('send to desktop', Number(command[8]));\n    return chrome.windows.getLastFocused({\n      populate: false\n    }, function(window) {\n      var id;\n      id = window.id;\n      if (id === LAYOUTS[currentDesktop].master) {\n        LAYOUTS[currentDesktop].master = LAYOUTS[currentDesktop].stacked.shift();\n      } else {\n        LAYOUTS[currentDesktop].stacked = LAYOUTS[currentDesktop].stacked.filter(function(x) {\n          return x !== id;\n        });\n      }\n      chrome.windows.update(LAYOUTS[currentDesktop].master, {\n        focused: true\n      });\n      LAYOUTS[currentDesktop].update();\n      return LAYOUTS[Number(command[8])].stacked.push(window.id);\n    });\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}